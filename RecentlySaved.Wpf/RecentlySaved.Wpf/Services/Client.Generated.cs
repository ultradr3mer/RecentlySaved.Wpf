//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace RecentlySaved.Wpf.Services
{
  using System = global::System;

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class Client
  {
    private string _baseUrl = "https://advancedclipboard2.azurewebsites.net/";
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public Client(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ApiAuthenticationAsync(AuthenticationPostData body)
    {
      return ApiAuthenticationAsync(body, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task ApiAuthenticationAsync(AuthenticationPostData body, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Authentication");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ApiClipboardDeleteAsync(System.Guid? id)
    {
      return ApiClipboardDeleteAsync(id, System.Threading.CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task ApiClipboardDeleteAsync(System.Guid? id, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Clipboard?");
      if (id != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ApiClipboardPutAsync(ClipboardPutData body)
    {
      return ApiClipboardPutAsync(body, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public void ApiClipboardPut(ClipboardPutData body)
    {
      System.Threading.Tasks.Task.Run(async () => await ApiClipboardPutAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task ApiClipboardPutAsync(ClipboardPutData body, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Clipboard");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<ClipboardContainerGetData> ApiClipboardGetlanewithcontextAsync(System.Guid? lane)
    {
      return ApiClipboardGetlanewithcontextAsync(lane, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public ClipboardContainerGetData ApiClipboardGetlanewithcontext(System.Guid? lane)
    {
      return System.Threading.Tasks.Task.Run(async () => await ApiClipboardGetlanewithcontextAsync(lane, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<ClipboardContainerGetData> ApiClipboardGetlanewithcontextAsync(System.Guid? lane, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Clipboard/GetLaneWithContext?");
      if (lane != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("lane") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lane, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<ClipboardContainerGetData>(response_, headers_).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<ClipboardContainerGetData> ApiClipboardGetwithcontextAsync()
    {
      return ApiClipboardGetwithcontextAsync(System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public ClipboardContainerGetData ApiClipboardGetwithcontext()
    {
      return System.Threading.Tasks.Task.Run(async () => await ApiClipboardGetwithcontextAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<ClipboardContainerGetData> ApiClipboardGetwithcontextAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Clipboard/GetWithContext");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<ClipboardContainerGetData>(response_, headers_).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<ClipboardGetData> ApiClipboardPostfileAsync(string fileExtension, System.Guid? laneId, FileParameter file)
    {
      return ApiClipboardPostfileAsync(fileExtension, laneId, file, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public ClipboardGetData ApiClipboardPostfile(string fileExtension, System.Guid? laneId, FileParameter file)
    {
      return System.Threading.Tasks.Task.Run(async () => await ApiClipboardPostfileAsync(fileExtension, laneId, file, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<ClipboardGetData> ApiClipboardPostfileAsync(string fileExtension, System.Guid? laneId, FileParameter file, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Clipboard/PostFile?");
      if (fileExtension != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("fileExtension") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fileExtension, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (laneId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("laneId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(laneId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var boundary_ = System.Guid.NewGuid().ToString();
          var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
          content_.Headers.Remove("Content-Type");
          content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
          if (file == null)
            throw new System.ArgumentNullException("file");
          else
          {
            var content_file_ = new System.Net.Http.StreamContent(file.Data);
            if (!string.IsNullOrEmpty(file.ContentType))
              content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
            content_.Add(content_file_, "file", file.FileName ?? "file");
          }
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<ClipboardGetData>(response_, headers_).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<ClipboardGetData> ApiClipboardPostnamedfileAsync(string fileName, System.Guid? laneId, FileParameter file)
    {
      return ApiClipboardPostnamedfileAsync(fileName, laneId, file, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public ClipboardGetData ApiClipboardPostnamedfile(string fileName, System.Guid? laneId, FileParameter file)
    {
      return System.Threading.Tasks.Task.Run(async () => await ApiClipboardPostnamedfileAsync(fileName, laneId, file, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<ClipboardGetData> ApiClipboardPostnamedfileAsync(string fileName, System.Guid? laneId, FileParameter file, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Clipboard/PostNamedFile?");
      if (fileName != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("fileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (laneId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("laneId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(laneId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var boundary_ = System.Guid.NewGuid().ToString();
          var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
          content_.Headers.Remove("Content-Type");
          content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
          if (file == null)
            throw new System.ArgumentNullException("file");
          else
          {
            var content_file_ = new System.Net.Http.StreamContent(file.Data);
            if (!string.IsNullOrEmpty(file.ContentType))
              content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
            content_.Add(content_file_, "file", file.FileName ?? "file");
          }
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<ClipboardGetData>(response_, headers_).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<ClipboardGetData> ApiClipboardPostplaintextAsync(ClipboardPostPlainTextData body)
    {
      return ApiClipboardPostplaintextAsync(body, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public ClipboardGetData ApiClipboardPostplaintext(ClipboardPostPlainTextData body)
    {
      return System.Threading.Tasks.Task.Run(async () => await ApiClipboardPostplaintextAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<ClipboardGetData> ApiClipboardPostplaintextAsync(ClipboardPostPlainTextData body, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Clipboard/PostPlainText");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<ClipboardGetData>(response_, headers_).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ApiFileThumbAsync(string token, string filename)
    {
      return ApiFileThumbAsync(token, filename, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public void ApiFileThumb(string token, string filename)
    {
      System.Threading.Tasks.Task.Run(async () => await ApiFileThumbAsync(token, filename, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task ApiFileThumbAsync(string token, string filename, System.Threading.CancellationToken cancellationToken)
    {
      if (token == null)
        throw new System.ArgumentNullException("token");

      if (filename == null)
        throw new System.ArgumentNullException("filename");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/File/thumb/{token}/{filename}");
      urlBuilder_.Replace("{token}", System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{filename}", System.Uri.EscapeDataString(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ApiFileAsync(string token, string filename)
    {
      return ApiFileAsync(token, filename, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public void ApiFile(string token, string filename)
    {
      System.Threading.Tasks.Task.Run(async () => await ApiFileAsync(token, filename, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task ApiFileAsync(string token, string filename, System.Threading.CancellationToken cancellationToken)
    {
      if (token == null)
        throw new System.ArgumentNullException("token");

      if (filename == null)
        throw new System.ArgumentNullException("filename");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/File/{token}/{filename}");
      urlBuilder_.Replace("{token}", System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{filename}", System.Uri.EscapeDataString(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ApiLaneAssigncontentAsync(AssignContentToLanePutData body)
    {
      return ApiLaneAssigncontentAsync(body, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public void ApiLaneAssigncontent(AssignContentToLanePutData body)
    {
      System.Threading.Tasks.Task.Run(async () => await ApiLaneAssigncontentAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task ApiLaneAssigncontentAsync(AssignContentToLanePutData body, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Lane/AssignContent");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ApiLaneDeleteAsync(System.Guid? laneId)
    {
      return ApiLaneDeleteAsync(laneId, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public void ApiLaneDelete(System.Guid? laneId)
    {
      System.Threading.Tasks.Task.Run(async () => await ApiLaneDeleteAsync(laneId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task ApiLaneDeleteAsync(System.Guid? laneId, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Lane?");
      if (laneId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("laneId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(laneId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("DELETE");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LaneGetData>> ApiLaneGetAsync()
    {
      return ApiLaneGetAsync(System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Collections.Generic.ICollection<LaneGetData> ApiLaneGet()
    {
      return System.Threading.Tasks.Task.Run(async () => await ApiLaneGetAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LaneGetData>> ApiLaneGetAsync(System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Lane");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LaneGetData>>(response_, headers_).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task ApiLanePutAsync(LanePutData body)
    {
      return ApiLanePutAsync(body, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public void ApiLanePut(LanePutData body)
    {
      System.Threading.Tasks.Task.Run(async () => await ApiLanePutAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task ApiLanePutAsync(LanePutData body, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Lane");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              return;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public System.Threading.Tasks.Task<LaneGetData> ApiLanePostlaneAsync(LanePostData body)
    {
      return ApiLanePostlaneAsync(body, System.Threading.CancellationToken.None);
    }

    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public LaneGetData ApiLanePostlane(LanePostData body)
    {
      return System.Threading.Tasks.Task.Run(async () => await ApiLanePostlaneAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Success</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public async System.Threading.Tasks.Task<LaneGetData> ApiLanePostlaneAsync(LanePostData body, System.Threading.CancellationToken cancellationToken)
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Lane/PostLane");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

          PrepareRequest(client_, request_, urlBuilder_);
          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<LaneGetData>(response_, headers_).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value == null)
      {
        return null;
      }

      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      var result = System.Convert.ToString(value, cultureInfo);
      return (result is null) ? string.Empty : result;
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AssignContentToLanePutData
  {
    [Newtonsoft.Json.JsonProperty("contentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid ContentId { get; set; }

    [Newtonsoft.Json.JsonProperty("laneId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid LaneId { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class AuthenticationPostData
  {
    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Email { get; set; }

    [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Password { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ClipboardContainerGetData
  {
    [Newtonsoft.Json.JsonProperty("lanes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<LaneGetData> Lanes { get; set; }

    [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ClipboardGetData> Entries { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ClipboardGetData
  {
    [Newtonsoft.Json.JsonProperty("contentTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid ContentTypeId { get; set; }

    [Newtonsoft.Json.JsonProperty("fileContentUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileContentUrl { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("textContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TextContent { get; set; }

    [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileName { get; set; }

    [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MimeType { get; set; }

    [Newtonsoft.Json.JsonProperty("laneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? LaneId { get; set; }

    [Newtonsoft.Json.JsonProperty("isPinned", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsPinned { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ClipboardPostPlainTextData
  {
    [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("laneGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? LaneGuid { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class ClipboardPutData
  {
    [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string FileName { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("laneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? LaneId { get; set; }

    [Newtonsoft.Json.JsonProperty("textContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string TextContent { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LaneGetData
  {
    [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Color { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("hasItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool HasItems { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LanePostData
  {
    [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Color { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class LanePutData
  {
    [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Color { get; set; }

    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SelectListGroup
  {
    [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Disabled { get; set; }

    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
  public partial class SelectListItem
  {
    [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Disabled { get; set; }

    [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public SelectListGroup Group { get; set; }

    [Newtonsoft.Json.JsonProperty("selected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool Selected { get; set; }

    [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Text { get; set; }

    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }


  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class FileParameter
  {
    public FileParameter(System.IO.Stream data)
        : this(data, null, null)
    {
    }

    public FileParameter(System.IO.Stream data, string fileName)
        : this(data, fileName, null)
    {
    }

    public FileParameter(System.IO.Stream data, string fileName, string contentType)
    {
      Data = data;
      FileName = fileName;
      ContentType = contentType;
    }

    public System.IO.Stream Data { get; private set; }

    public string FileName { get; private set; }

    public string ContentType { get; private set; }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ApiException : System.Exception
  {
    public int StatusCode { get; private set; }

    public string Response { get; private set; }

    public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
    {
      StatusCode = statusCode;
      Response = response;
      Headers = headers;
    }

    public override string ToString()
    {
      return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
  public partial class ApiException<TResult> : ApiException
  {
    public TResult Result { get; private set; }

    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
      Result = result;
    }
  }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108